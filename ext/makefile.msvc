# include this after mupdf\makefile.msvc

!if "$(O)"==""
!error Include mupdf\makefile.msvc first (or build ..\makefile.msvc instead)
!endif

OE = $(O)\ext
OBZ= $(O)\bzip2
ODV= $(O)\djvu
OC = $(O)\chmlib
OLZ= $(O)\lzma
OWP= $(O)\webp
OUN= $(O)\unarr

SYNCTEX_CFLAGS = $(CFLAGS) /TC /I$(EXTDIR)/synctex /I$(ZLIB_DIR) /wd4244 /wd4702 /wd4706 /wd4996
!if "$(PLATFORM)"=="X64"
SYNCTEX_CFLAGS = $(SYNCTEX_CFLAGS) /wd4267
!endif

BZIP2_CFLAGS = $(CFLAGSOPT) /TC /D "BZ_NO_STDIO" /D "BZ_DEBUG=0" /wd4244 /wd4701

DJVU_CFLAGS = $(CFLAGSOPT) /D "NEED_JPEG_DECODER" /I$(JPEG_TURBO_DIR)
DJVU_CFLAGS = $(DJVU_CFLAGS) /wd4189 /wd4244 /wd4512 /wd4611 /wd4701 /wd4702 /wd4703 /wd4706 /wd4996
DJVU_CFLAGS = $(DJVU_CFLAGS) /D "THREADMODEL=0" /D "DDJVUAPI=/**/" /D "MINILISPAPI=/**/"
# prevent libdjvu from changing the C locale from underneath anybody else
DJVU_CFLAGS = $(DJVU_CFLAGS) /D "DO_CHANGELOCALE=0"
# a hack to enable C++ exception handling for libdjvu (without triggering a warning)
DJVU_CFLAGS = $(DJVU_CFLAGS:/EHs-c-=/EHsc)
!if "$(PLATFORM)"=="X64"
DJVU_CFLAGS = $(DJVU_CFLAGS) /wd4267
!endif

CHMLIB_CFLAGS = $(CFLAGS) /TC /wd4018 /wd4057 /wd4189 /wd4244 /wd4295 /wd4701 /wd4706 /wd4996
# ChmLib also needs PPC_BSTR defined for UNICODE builds
CHMLIB_CFLAGS = $(CHMLIB_CFLAGS) /D "UNICODE" /D "_UNICODE" /D "PPC_BSTR"
!if "$(PLATFORM)"=="X64"
CHMLIB_CFLAGS = $(CHMLIB_CFLAGS) /wd4267
!endif

LZMA_CFLAGS = $(CFLAGSOPT) /TC /I$(EXTDIR)/lzma/C /D "_7ZIP_PPMD_SUPPPORT"

WEBP_CFLAGS = $(CFLAGSOPT) /TC /I$(EXTDIR)/libwebp /wd4057 /wd4204 /wd4244

UNARR_CFLAGS = $(CFLAGS) /TC /I$(EXTDIR)/unarr /wd4996
UNARR_CFLAGS = $(UNARR_CFLAGS) /D "HAVE_ZLIB" /I$(ZLIB_DIR)
UNARR_CFLAGS = $(UNARR_CFLAGS) /D "HAVE_BZIP2" /I$(EXTDIR)/bzip2
UNARR_CFLAGS = $(UNARR_CFLAGS) /D "HAVE_LZMA" /D "HAVE_7Z" /I$(EXTDIR)/lzma/C

SYNCTEX_OBJS = \
	$(OE)\synctex_parser.obj $(OE)\synctex_parser_utils.obj

BZIP2_OBJS = \
	$(OBZ)\bzip_all.obj

#	$(OBZ)\blocksort.obj $(OBZ)\bzlib.obj $(OBZ)\compress.obj $(OBZ)\crctable.obj \
#	$(OBZ)\decompress.obj $(OBZ)\huffman.obj $(OBZ)\randtable.obj $(OBZ)\bz_internal_error.obj

# Note: in theory using compiling all djvu files as one should generate smaller
# code, but it does just the opposite. Why?
!if "$(COMPACT_DJVU)" == "yes"
DJVU_OBJS = \
	$(ODV)\djvu_all.obj $(ODV)\DjVuDocEditor.obj $(ODV)\DjVuDocument.obj \
	$(ODV)\DjVuMessageLite.obj $(ODV)\DjVuToPS.obj $(ODV)\GMapAreas.obj \
	$(ODV)\GPixmap.obj $(ODV)\GScaler.obj $(ODV)\GURL.obj $(ODV)\IW44EncodeCodec.obj \
	$(ODV)\IW44Image.obj $(ODV)\JB2Image.obj $(ODV)\JPEGDecoder.obj \
	$(ODV)\XMLParser.obj $(ODV)\miniexp.obj
!else
DJVU_OBJS = \
	$(ODV)\Arrays.obj $(ODV)\atomic.obj $(ODV)\BSByteStream.obj \
	$(ODV)\BSEncodeByteStream.obj $(ODV)\ByteStream.obj $(ODV)\DataPool.obj \
	$(ODV)\DjVmDir0.obj $(ODV)\DjVmDoc.obj $(ODV)\DjVmNav.obj \
	$(ODV)\DjVuAnno.obj $(ODV)\DjVuDocEditor.obj $(ODV)\DjVuDocument.obj \
	$(ODV)\DjVuDumpHelper.obj $(ODV)\DjVuErrorList.obj $(ODV)\DjVuFile.obj \
	$(ODV)\DjVuFileCache.obj $(ODV)\DjVuGlobal.obj $(ODV)\DjVuGlobalMemory.obj \
	$(ODV)\DjVuImage.obj $(ODV)\DjVuInfo.obj $(ODV)\DjVuMessage.obj \
	$(ODV)\DjVuMessageLite.obj $(ODV)\DjVuNavDir.obj $(ODV)\DjVuPalette.obj \
	$(ODV)\DjVuPort.obj $(ODV)\DjVuText.obj $(ODV)\DjVuToPS.obj \
	$(ODV)\GBitmap.obj $(ODV)\GContainer.obj $(ODV)\GException.obj \
	$(ODV)\GIFFManager.obj $(ODV)\GMapAreas.obj $(ODV)\GOS.obj \
	$(ODV)\GPixmap.obj $(ODV)\GRect.obj $(ODV)\GScaler.obj \
	$(ODV)\GSmartPointer.obj $(ODV)\GString.obj $(ODV)\GThreads.obj \
	$(ODV)\GUnicode.obj $(ODV)\GURL.obj $(ODV)\IFFByteStream.obj \
	$(ODV)\IW44EncodeCodec.obj $(ODV)\IW44Image.obj $(ODV)\JB2EncodeCodec.obj \
	$(ODV)\DjVmDir.obj $(ODV)\JB2Image.obj $(ODV)\JPEGDecoder.obj \
	$(ODV)\MMRDecoder.obj $(ODV)\MMX.obj $(ODV)\UnicodeByteStream.obj \
	$(ODV)\XMLParser.obj $(ODV)\XMLTags.obj $(ODV)\ZPCodec.obj \
	$(ODV)\ddjvuapi.obj $(ODV)\debug.obj $(ODV)\miniexp.obj
!endif

CHMLIB_OBJS = \
	$(OC)\chm_lib.obj $(OC)\lzx.obj

LZMA_OBJS = \
	$(OLZ)\LzmaDec.obj $(OLZ)\Bra86.obj \
	$(OLZ)\LzmaEnc.obj $(OLZ)\LzFind.obj $(OLZ)\LzFindMt.obj $(OLZ)\Threads.obj

_7Z_OBJS = \
	$(OLZ)\7zBuf.obj $(OLZ)\7zDec.obj $(OLZ)\7zIn.obj $(OLZ)\7zStream.obj \
	$(OLZ)\Bcj2.obj $(OLZ)\Bra.obj $(OLZ)\Lzma2Dec.obj

WEBP_OBJS = \
	$(OWP)\alpha.obj $(OWP)\buffer.obj $(OWP)\frame.obj $(OWP)\idec.obj \
	$(OWP)\io.obj $(OWP)\quant.obj $(OWP)\tree.obj \
	$(OWP)\vp8.obj $(OWP)\vp8l.obj $(OWP)\webp.obj \
	$(OWP)\alpha_processing.obj $(OWP)\cpu.obj $(OWP)\dec.obj $(OWP)\dec_sse2.obj \
	$(OWP)\lossless.obj $(OWP)\lossless_sse2.obj $(OWP)\upsampling.obj \
	$(OWP)\upsampling_sse2.obj $(OWP)\yuv.obj $(OWP)\yuv_sse2.obj \
	$(OWP)\dec_clip_tables.obj $(OWP)\alpha_processing_sse2.obj \
	$(OWP)\bit_reader.obj $(OWP)\color_cache.obj $(OWP)\filters.obj \
	$(OWP)\huffman.obj $(OWP)\quant_levels_dec.obj $(OWP)\rescaler.obj \
	$(OWP)\thread.obj $(OWP)\utils.obj $(OWP)\random.obj
	

UNARR_OBJS = \
	$(OUN)\conv.obj $(OUN)\crc32.obj $(OUN)\stream.obj $(OUN)\unarr.obj \
	$(OUN)\CpuArch.obj $(OUN)\Ppmd7.obj $(OUN)\Ppmd7Dec.obj \
	$(OUN)\Ppmd8.obj $(OUN)\Ppmd8Dec.obj \
	$(OUN)\filter-rar.obj $(OUN)\parse-rar.obj $(OUN)\rar.obj \
	$(OUN)\rarvm.obj $(OUN)\uncompress-rar.obj $(OUN)\huffman-rar.obj \
	$(OUN)\parse-zip.obj $(OUN)\uncompress-zip.obj $(OUN)\zip.obj \
	$(OUN)\_7z.obj $(OUN)\tar.obj $(OUN)\parse-tar.obj $(OUN)\inflate.obj

$(OE): force
	@if not exist $(OE) mkdir $(OE)
	@if not exist $(OBZ) mkdir $(OBZ)
	@if not exist $(ODV) mkdir $(ODV)
	@if not exist $(OC) mkdir $(OC)
	@if not exist $(OLZ) mkdir $(OLZ)
	@if not exist $(OWP) mkdir $(OWP)
	@if not exist $(OUN) mkdir $(OUN)

{$(EXTDIR)\bzip2}.c{$(OBZ)}.obj::
	$(CC) $(BZIP2_CFLAGS) /Fo$(OBZ)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\synctex}.c{$(OE)}.obj::
	$(CC) $(SYNCTEX_CFLAGS) /Fo$(OE)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\libdjvu}.cpp{$(ODV)}.obj::
	$(CC) $(DJVU_CFLAGS) /Fo$(ODV)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\CHMLib\src}.c{$(OC)}.obj::
	$(CC) $(CHMLIB_CFLAGS) /Fo$(OC)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\lzma\C}.c{$(OLZ)}.obj::
	$(CC) $(LZMA_CFLAGS) /Fo$(OLZ)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\libwebp\dec}.c{$(OWP)}.obj::
	$(CC) $(WEBP_CFLAGS) /Fo$(OWP)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\libwebp\dsp}.c{$(OWP)}.obj::
	$(CC) $(WEBP_CFLAGS) /Fo$(OWP)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\libwebp\utils}.c{$(OWP)}.obj::
	$(CC) $(WEBP_CFLAGS) /Fo$(OWP)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\common}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\lzmasdk}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\rar}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\tar}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\zip}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

{$(EXTDIR)\unarr\_7z}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

# executable(s) for testing the above libraries

unarr_test: $(O) $(OE) $(O)\unarr.exe

{$(EXTDIR)\unarr}.c{$(OUN)}.obj::
	$(CC) $(UNARR_CFLAGS) /Fo$(OUN)\ /Fd$(O)\vc80.pdb $<

$(O)\unarr.exe: $(UNARR_OBJS) $(OUN)\main.obj $(ZLIB_OBJS) $(BZIP2_OBJS) $(LZMA_OBJS) $(_7Z_OBJS)
	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ /SUBSYSTEM:CONSOLE
